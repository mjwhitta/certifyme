#!/usr/bin/env bash
# A script to quickly generate a root CA and client/server
# certificates.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

# shellcheck disable=SC1090,SC1091,SC2086

# Stupid Windows
export MSYS_NO_PATHCONV=1

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

clean() { rm -f certifyme.openssl.cnf "$tmpcnf"; }

create_ca() {
    setup "${CACN:-Self-signed CA}"
    create_key ca.key

    if [[ ! -f ca/ca.cert.pem ]] && [[ -f private/ca.key.pem ]]; then
        info "Generating ca.cert.pem"
        openssl req -batch $sslcnf -days +"${CADAYS:-365}" \
            -extensions v3_ca -key private/ca.key.pem -new \
            -out ca/ca.cert.pem -passin pass:"${CAPASS:-password}" \
            -sha256 -subj "/$subj" -x509
        [[ -f ca/ca.cert.pem ]] || err "Failed to create ca.cert.pem"
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f ca/ca.cert.der ]] && [[ -f ca/ca.cert.pem ]]; then
            info "Generating ca.cert.der"
            openssl x509 -in ca/ca.cert.pem -inform pem \
                -out ca/ca.cert.der -outform der
        fi
        [[ -f ca/ca.cert.der ]] || err "Failed to create ca.cert.der"
    fi

    fix_perms

    # Symlink files
    local der_link="ca/ca.cert.der"
    local pem_link="ca/ca.cert.pem"
    [[ ! -f $pem_link ]] || ln -sf ../$pem_link pems/
    if [[ -n $CREATE_DER ]]; then
        [[ ! -f $der_link ]] || ln -sf ../$der_link ders/
    fi
}

create_cert() {
    setup "$1"

    case "$2" in
        "client")
            cert="$1.client.cert"
            csr="$1.client.csr"
            key="$1.client.key"
            ;;
        *)
            cert="$1.cert"
            csr="$1.csr"
            key="$1.key"
            ;;
    esac

    create_key "$key"

    if [[ -n $csrfile ]]; then
        cp -f "$csrfile" "csr/$csr.pem"
        unset csrfile
    else
        # Shouldn't have a csr and no certificate
        [[ -f certs/$cert.pem ]] || rm -f "csr/$csr.pem"
    fi

    if [[ ! -f csr/$csr.pem ]] && [[ -f private/$key.pem ]]; then
        info "Generating $csr.pem"
        openssl req -batch $sslcnf -key "private/$key.pem" \
            -new -out "csr/$csr.pem" -sha256
        [[ -f csr/$csr.pem ]] || err "Failed to create $csr.pem"
    fi

    if [[ -f csr/$csr.pem ]] && [[ ! -f certs/$cert.pem ]]; then
        info "Generating $cert.pem"
        openssl ca -batch $sslcnf -extensions "${2}_cert" \
            -in "csr/$csr.pem" -notext -out "certs/$cert.pem"
        [[ -f certs/$cert.pem ]] || err "Failed to create $cert.pem"
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f certs/$cert.der ]] &&
           [[ -f certs/$cert.pem ]]
        then
            info "Generating $cert.der"
            openssl x509 -in "certs/$cert.pem" -inform pem \
                -out "certs/$cert.der" -outform der
        fi
        [[ -f certs/$cert.der ]] || err "Failed to create $cert.der"
    fi

    rm -f ./*.old
    find certs -regextype posix-extended \
        -iregex ".*\.cert\.(der|pem)" -prune -o -type f \
        -exec rm -f {} +
    find certs -size 0 -exec rm -f {} +

    fix_perms

    # Symlink files
    local der_link="certs/$cert.der"
    local pem_link="certs/$cert.pem"
    [[ ! -f $pem_link ]] || ln -sf "../$pem_link" pems/
    if [[ -n $CREATE_DER ]]; then
        [[ ! -f $der_link ]] || ln -sf "../$der_link" ders/
    fi

    # Generate concatenated files
    case "$2" in
        "client")
            if [[ -f certs/$cert.pem ]] &&
               [[ -f private/$key.pem ]]; then
                cat "certs/$cert.pem" "private/$key.pem" \
                    >"pems/$1.client.pem"
            fi
            ;;
        *)
            if [[ -f certs/$cert.pem ]]; then
                cat "certs/$cert.pem" "ca/ca.cert.pem" \
                    >"pems/$1.chain.pem"
            fi
            ;;
    esac
}

create_dh() {
    if [[ ! -f dh/dh2048.pem ]]; then
        info "Generating dh2048.pem"
        openssl dhparam -out dh/dh2048.pem 2048
        [[ -f dh/dh2048.pem ]] || err "Failed to create dh2048.pem"
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f dh/dh2048.der ]] && [[ -f dh/dh2048.pem ]]; then
            info "Generating dh2048.der"
            openssl dhparam -in dh/dh2048.pem -inform pem \
                -out dh/dh2048.der -outform der
        fi
        [[ -f dh/dh2048.der ]] || err "Failed to create dh2048.der"
    fi

    fix_perms

    # Symlink files
    local der_link="dh/dh2048.der"
    local pem_link="dh/dh2048.pem"
    [[ ! -f $pem_link ]] || ln -sf ../$pem_link pems/
    if [[ -n $CREATE_DER ]]; then
        [[ ! -f $der_link ]] || ln -sf ../$der_link ders/
    fi
}

create_key() {
    if [[ ! -f private/$1.pem ]]; then
        info "Generating $1.pem"
        openssl genrsa -out "private/$1.pem" -passout pass: 2048
        [[ -f private/$1.pem ]] || err "Failed to create key $1.pem"
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f private/$1.der ]] && [[ -f private/$1.pem ]]; then
            info "Generating $1.der"
            openssl pkcs8 -in "private/$1.pem" -inform pem \
                -out "private/$1.der" -outform der -passout pass: \
                -topk8
        fi
        [[ -f private/$1.der ]] || err "Failed to create key $1.der"
    fi

    fix_perms

    # Symlink files
    local der_link="private/$1.der"
    local pem_link="private/$1.pem"
    [[ ! -f $pem_link ]] || ln -sf "../$pem_link" pems/
    if [[ -n $CREATE_DER ]]; then
        [[ ! -f $der_link ]] || ln -sf "../$der_link" ders/
    fi
}

fix_perms() {
    find ca certs dh private -type d -exec chmod 700 {} +
    find ca certs dh private -type f -exec chmod 400 {} +
    chmod -R go-rwx .
}

remove_from_db() {
    [[ $# -eq 1 ]] || return 0
    [[ -f ca/ca.cert.pem ]] || return 0
    [[ -f index.db ]] || return 0
    serial="$(\grep -Em 1 "/CN=$1$" index.db | awk '{print $3}')"
    [[ -n $serial ]] || return 0

    warn "Removing $1 from the database"

    # Update the index.db
    sed -i -r "/\s+$serial\s+/d" index.db

    # Remove certificate, csr, and key
    rm -f ./*/"$1."*
}

setup() {
    subj="CN=$1"
    [[ -z $UNIT ]] || subj="OU=$UNIT/$subj"
    [[ -z $COMPANY ]] || subj="O=$COMPANY/$subj"
    [[ -z $CITY ]] || subj="L=$CITY/$subj"
    [[ -z $STATE ]] || subj="ST=$STATE/$subj"
    [[ -z $COUNTRY ]] || subj="C=$COUNTRY/$subj"

    mkdir -p ca certs csr dh pems private
    [[ -z $CREATE_DER ]] || mkdir -p ders
    touch index.db index.db.attr
    if [[ ! -f index.db.serial ]]; then
        head -c 2 /dev/urandom | xxd -p >index.db.serial
    fi

    sed \
        -e "s/TODO_CERTDAYS/${CERTDAYS:-365}/g" \
        -e "s/TODO_CERTDAYS/\&/g" \
        -e "s/TODO_CITY/\"${CITY:-delete}\"/g" \
        -e "s/TODO_CITY/\&/g" \
        -e "s/TODO_CN/\"$1\"/g" \
        -e "s/TODO_CN/\&/g" \
        -e "s/TODO_COMPANY/\"${COMPANY:-delete}\"/g" \
        -e "s/TODO_COMPANY/\&/g" \
        -e "s/TODO_COUNTRY/\"${COUNTRY:-delete}\"/g" \
        -e "s/TODO_COUNTRY/\&/g" \
        -e "s/TODO_STATE/\"${STATE:-delete}\"/g" \
        -e "s/TODO_STATE/\&/g" \
        -e "s/TODO_UNIT/\"${UNIT:-delete}\"/g" \
        -e "s/TODO_UNIT/\&/g" \
        -e "/delete/d" \
        "$tmpcnf" >certifyme.openssl.cnf
}

undo() {
    [[ -f ca/ca.cert.pem ]] || return 0
    [[ -f index.db ]] || return 0
    serial="$(tail -n 1 index.db | awk '{print $3}')"
    [[ -n $serial ]] || return 0

    host="$(tail -n 1 index.db | awk -F "=" '{print $NF}')"
    warn "Rolling back database prior to $host"

    # Rollback the index.db
    echo "$serial" >index.db.serial
    sed -i -r "/\s+$serial\s+/d" index.db

    # Remove certificate, csr, and key
    rm -f ./*/"$host."*
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [host1]...[hostN]

DESCRIPTION
    Easily generate a self-signed CA and issue client/server
    certificates.

OPTIONS
    -c, --client=HOST      Create client certificate (can be used more
                           than once)
        --conf=CONFIG      Use the specified certifyme.conf (default:
                           $pki/certifyme.conf)
        --csr=FILE         Use the specified CSR for the first
                           requested client/server
    -d, --dh               Create Diffie-Hellman parameters
    -h, --help             Display this help message
        --no-color         Disable colorized output
    -p, --pki=DIR          Use specified PKI directory (default: $pki)
    -r, --rm=HOST          Remove a certificate (does NOT revoke)
    -s, --sample-config    Generate sample certifyme.conf
    -u, --undo             Rollback most recent generated certificate
    -w, --wipe             Wipe CA, certificates, dh params and keys

EOF
    exit "$1"
}

wipe_pki() {
    warn "Wiping PKI"
    rm -rf ca certs csr ders dh index.db* pems private
}

declare -a args clients
unset config csrfile dh help remove
action="generate"
color="true"
pki="${CERTIFYME_PKI:-.}"
sslcnf="-config certifyme.openssl.cnf"
tmpcnf="/tmp/certifyme.openssl.cnf"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-c"|"--client"*) clients+=("$(long_opt "$@")") ;;
        "--conf"*) config="$(long_opt "$@")" ;;
        "--csr"*) csrfile="$(long_opt "$@")" ;;
        "-d"|"--dh") dh="true" ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        "-p"|"--pki"*) pki="$(long_opt "$@")" ;;
        "-r"|"--rm"*) action="remove"; remove="$(long_opt "$@")" ;;
        "-s"|"--sample-config") action="config" ;;
        "-u"|"--undo") action="undo" ;;
        "-w"|"--wipe") action="wipe" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("openssl")
check_deps

# TODO Check for valid params

# Get fullpath to csrfile and ensure it exists
if [[ -n $csrfile ]]; then
    case "$csrfile" in
        "/"*) ;;
        *) csrfile="$(pwd)/$csrfile" ;;
    esac

    [[ -f $csrfile ]] || errx 1 "Specified CSR does not exist"
fi

# Source config if specified
[[ -z $config ]] || [[ ! -f $config ]] || . "$config"

# Operate from with-in PKI directory
mkdir -p "$pki"
cd "$pki"

# Source config in pki directory if one wasn't specified
[[ -n $config ]] || [[ ! -f certifyme.conf ]] || . certifyme.conf

case "${CREATE_DER:-true}" in
    "T"|"t"|"True"|"true"|"Y"|"y"|"Yes"|"yes") CREATE_DER="true" ;;
    *) unset CREATE_DER ;;
esac

cat >"$tmpcnf" <<EOF
# OpenSSL configuration file.

dir = .

[ ca ]
default_ca = CA_default

[ CA_default ]
certs = \$dir/certs
new_certs_dir = \$dir/certs
database = \$dir/index.db
serial = \$dir/index.db.serial
RANDFILE = \$dir/private/.rand

certificate = \$dir/ca/ca.cert.pem
private_key = \$dir/private/ca.key.pem

default_md = sha256

name_opt = CA_default
cert_opt = CA_default
default_days = TODO_CERTDAYS
email_in_dn = no
preserve = no
policy = policy_string

[ policy_string ]
countryName = optional
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

[ policy_any ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

[ req ]
default_bits = 2048
distinguished_name = req_distinguished_name
string_mask = utf8only

default_md = sha256

x509_extensions = v3_ca

[ req_distinguished_name ]
countryName = Country Name (2 letter code) # TODO_COUNTRY
countryName_default = TODO_COUNTRY
countryName_min = 2 # TODO_COUNTRY
countryName_max = 2 # TODO_COUNTRY

stateOrProvinceName = State or Province Name (full name) # TODO_STATE
stateOrProvinceName_default = TODO_STATE

localityName = Locality Name (eg, city) # TODO_CITY
localityName_default = TODO_CITY

0.organizationName = Organization Name (eg, company) # TODO_COMPANY
0.organizationName_default = TODO_COMPANY

organizationalUnitName = Organizational Unit Name (eg, section) # TODO_UNIT
organizationalUnitName_default = TODO_UNIT

commonName = Common Name (FQDN for server certificates)
commonName_default = TODO_CN
commonName_max = 64

[ req_attributes ]

[ v3_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ server_cert ]
basicConstraints = CA:false
nsCertType = server
nsComment = "OpenSSL genereated server certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @subject_alt_names

[ client_cert ]
basicConstraints = CA:false
nsCertType = client, email
nsComment = "OpenSSL genereated client certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature, keyEncipherment, nonRepudiation
extendedKeyUsage = clientAuth, emailProtection
subjectAltName = @subject_alt_names

[ subject_alt_names ]
DNS.1 = TODO_CN
EOF

case "$action" in
    "config")
        cat <<EOF
# Adjust and uncomment these values as needed

## Certificate related options

# CACN="Self-signed CA"
# CADAYS=365
# CAPASS="$(head -c 4 /dev/urandom | xxd -p)"
# CERTDAYS=365
# CITY="City name"
# COMPANY="Company name"
# COUNTRY="US"
# STATE="State name"
# UNIT="Department"

## certifyme related options

# CREATE_DER="true"
EOF
        ;;
    "generate")
        create_ca
        [[ -z $dh ]] || create_dh
        for client in "${clients[@]}"; do
            create_cert "$client" "client"
        done; unset client
        for host in "$@"; do
            create_cert "$host" "server"
        done; unset host
        ;;
    "remove") remove_from_db "$remove" ;;
    "undo") undo ;;
    "wipe") wipe_pki ;;
esac

clean
