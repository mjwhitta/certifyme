#!/usr/bin/env bash

create_ca() {
    setup "${CACN:-Self-signed CA}"
    create_key ca.key

    if [[ ! -f ca/ca.cert.pem ]]; then
        openssl req $automate $config -days +${CADAYS:-11688} \
            -extensions v3_ca -key private/ca.key.pem -new \
            -out ca/ca.cert.pem -passin pass:${CAPASS:-password} \
            -sha256 -subj "/$subj" -x509
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f ca/ca.cert.der ]] && [[ -f ca/ca.cert.pem ]]; then
            openssl x509 -in ca/ca.cert.pem -inform pem \
                -out ca/ca.cert.der -outform der
        fi
    fi

    fix_perms

    # Symlink files
    ln -sf ../ca/ca.cert.pem pems/
    [[ -z $CREATE_DER ]] || ln -sf ../ca/ca.cert.der ders/
}

create_cert() {
    setup "$1"
    create_key $1.key
    cert="$1.cert"

    # Shouldn't have a csr and no certificate
    [[ -f certs/$cert.pem ]] || rm -f csr/$1.csr.pem

    if [[ ! -f csr/$1.csr.pem ]]; then
        openssl req $automate $config -key private/$1.key.pem \
            -new -out csr/$1.csr.pem -sha256
    fi

    if [[ ! -f certs/$cert.pem ]]; then
        openssl ca $automate $config -extensions ${2}_cert \
            -in csr/$1.csr.pem -notext -out certs/$cert.pem
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f certs/$cert.der ]] &&
           [[ -f certs/$cert.pem ]]
        then
            openssl x509 -in certs/$cert.pem -inform pem \
                -out certs/$cert.der -outform der
        fi
    fi

    rm -f *.old
    for junk in $(ls certs | \grep -Ev "\.cert\.(der|pem)"); do
        rm -f certs/$junk
    done; unset junk
    find certs -size 0 -exec rm -f {} +

    fix_perms

    # Symlink files
    ln -sf ../certs/$cert.pem pems/
    [[ -z $CREATE_DER ]] || ln -sf ../certs/$cert.der ders/
}

create_dh() {
    if [[ ! -f dh/dh2048.pem ]]; then
        openssl dhparam -out dh/dh2048.pem 2048
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f dh/dh2048.der ]] && [[ -f dh/dh2048.pem ]]; then
            openssl dhparam -in dh/dh2048.pem -inform pem \
                -out dh/dh2048.der -outform der
        fi
    fi

    fix_perms

    # Symlink files
    ln -sf ../dh/dh2048.pem pems/
    [[ -z $CREATE_DER ]] || ln -sf ../dh/dh2048.der ders/
}

create_key() {
    if [[ ! -f private/$1.pem ]]; then
        openssl genrsa -out private/$1.pem -passout pass: 2048
    fi

    if [[ -n $CREATE_DER ]]; then
        if [[ ! -f private/$1.der ]] && [[ -f private/$1.pem ]]; then
            openssl pkcs8 -in private/$1.pem -inform pem \
                -out private/$1.der -outform der -passout pass: -topk8
        fi
    fi

    fix_perms

    # Symlink files
    ln -sf ../private/$1.pem pems/
    [[ -z $CREATE_DER ]] || ln -sf ../private/$1.der ders/
}

fix_perms() {
    find ca certs dh private -type d -exec chmod 700 {} +
    find ca certs dh private -type f -exec chmod 400 {} +
    chmod -R go-rwx .
}

remove_from_db() {
    [[ $# -eq 1 ]] || return 0
    host="$1"
    [[ -f ca/ca.cert.pem ]] || return 0
    [[ -f index.db ]] || return 0
    remove="$(\grep -m 1 "/CN=$host" index.db | awk '{print $3,$5}')"
    [[ -n $remove ]] || return 0

    # Update the index.db
    serial="${remove/ */}"
    sed -i -r "/\s+$serial\s+/d" index.db

    # Remove certificate, csr, and key
    host="$(echo "$remove" | awk -F "=" '{print $NF}')"
    rm -f */$host.*
}

setup() {
    subj="CN=$1"
    [[ -z $UNIT ]] || subj="OU=$UNIT/$subj"
    [[ -z $COMPANY ]] || subj="O=$COMPANY/$subj"
    [[ -z $CITY ]] || subj="L=$CITY/$subj"
    [[ -z $STATE ]] || subj="ST=$STATE/$subj"
    [[ -z $COUNTRY ]] || subj="C=$COUNTRY/$subj"

    mkdir -p ca certs csr dh pems private
    [[ -z $CREATE_DER ]] || mkdir -p ders
    touch index.db index.db.attr
    if [[ ! -f index.db.serial ]]; then
        head -c 2 /dev/urandom | xxd -p >index.db.serial
    fi

    sed \
        -e "s/TODO_CERTDAYS/${CERTDAYS:-5844}/g" \
        -e "s/TODO_CITY/\"${CITY:-delete}\"/g" \
        -e "s/TODO_CN/\"$1\"/g" \
        -e "s/TODO_COMPANY/\"${COMPANY:-delete}\"/g" \
        -e "s/TODO_COUNTRY/\"${COUNTRY:-delete}\"/g" \
        -e "s/TODO_STATE/\"${STATE:-delete}\"/g" \
        -e "s/TODO_UNIT/\"${UNIT:-delete}\"/g" \
        -e "/delete/d" \
        $certifyme/openssl.cnf >$certifyme/.openssl.cnf
}

undo() {
    [[ -f ca/ca.cert.pem ]] || return 0
    [[ -f index.db ]] || return 0
    rollback="$(tail -n 1 index.db | awk '{print $3,$5}')"
    [[ -n $rollback ]] || return 0

    # Rollback the index.db
    serial="${rollback/ */}"
    echo "$serial" >index.db.serial
    sed -i -r "/\s+$serial\s+/d" index.db

    # Remove certificate, csr, and key
    host="$(echo "$rollback" | awk -F "=" '{print $NF}')"
    rm -f */$host.*
}

usage() {
    echo "Usage: ./${0/*\//} [OPTIONS] [host1]...[hostN]"
    echo "Options:"
    echo "    --clean          Clean up CA, certificates, dh params"
    echo "                     and keys"
    echo "    -c, --client     Create client certificate"
    echo "    --dh             Create Diffie-Hellman parameters"
    echo "    -h, --help       Display this help message"
    echo "    -p, --pki=DIR    Use specified params file"
    echo "    --rm=HOST        Remove a certificate (does NOT revoke)"
    echo "    -u, --undo       Rollback most recently generated"
    echo "                     certificate"
    echo
    exit $1
}

declare -a args
action="server"
unset dh remove
pki="."

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "--clean") action="clean" ;;
        "-c"|"--client") action="client" ;;
        "--dh") dh="true" ;;
        "-h"|"--help") usage 0 ;;
        "-p"|"--pki"*)
            case "$1" in
                "--"*"="*)
                    arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                    [[ -n $arg ]] || usage 1
                    ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            pki="$arg"
            ;;
        "--rm"*)
            case "$1" in
                "--"*"="*)
                    arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                    [[ -n $arg ]] || usage 1
                    ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            action="remove"
            remove="$arg"
            ;;
        "-u"|"--undo") action="undo" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

certifyme="$(pwd)"
cd $pki

[[ ! -f params ]] || . params

case "${CREATE_DER:-true}" in
    "T"|"t"|"True"|"true"|"Y"|"y"|"Yes"|"yes") CREATE_DER="true" ;;
    *) unset CREATE_DER ;;
esac

automate="-batch"
config="-config $certifyme/.openssl.cnf"

case "$action" in
    "clean")
        rm -rf $certifyme/.openssl* ca certs csr ders dh index.db* \
            pems private
        ;;
    "client"|"server")
        create_ca
        [[ -z $dh ]] || create_dh
        for host in "$@"; do
            create_cert $host $action
        done; unset host
        ;;
    "remove") remove_from_db $remove ;;
    "undo") undo ;;
esac
