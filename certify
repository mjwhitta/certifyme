#!/usr/bin/env bash

create_ca() {
    setup "Self-signed CA"

    create_key ca.key

    if [[ ! -f ca/ca.cert.pem ]]; then
        openssl req $automate $config -days +11688 -extensions v3_ca \
            -key private/ca.key.pem -new -out ca/ca.cert.pem \
            -passin pass:password -sha256 -subj "/$subj" -x509
    fi

    if [[ ! -f ca/ca.cert.der ]] && [[ -f ca/ca.cert.pem ]]; then
        openssl x509 -in ca/ca.cert.pem -inform pem \
            -out ca/ca.cert.der -outform der
    fi

    fix_perms
}

create_cert() {
    setup "$1"

    create_key $1.key

    cert="$1.cert"

    if [[ ! -f csr/$1.csr.pem ]]; then
        openssl req $automate $config -key private/$1.key.pem \
            -new -out csr/$1.csr.pem -sha256
    fi

    if [[ ! -f certs/$cert.pem ]]; then
        openssl ca $automate $config -extensions ${2}_cert \
            -in csr/$1.csr.pem -notext -out certs/$cert.pem
    fi

    if [[ ! -f certs/$cert.der ]] && [[ -f certs/$cert.pem ]]; then
        openssl x509 -in certs/$cert.pem -inform pem \
            -out certs/$cert.der -outform der
    fi

    rm -f *.old
    for junk in $(ls certs | \grep -Ev "\.cert\.(der|pem)"); do
        rm -f certs/$junk
    done
    find certs -size 0 -exec rm -f {} +

    fix_perms
}

create_dh() {
    if [[ ! -f dh/dh2048.pem ]]; then
        openssl dhparam -out dh/dh2048.pem 2048
    fi

    if [[ ! -f dh/dh2048.der ]] && [[ -f dh/dh2048.pem ]]; then
        openssl dhparam -in dh/dh2048.pem -inform pem \
            -out dh/dh2048.der -outform der
    fi

    fix_perms
}

create_key() {
    if [[ ! -f private/$1.pem ]]; then
        openssl genrsa -out private/$1.pem -passout pass: 2048
    fi

    if [[ ! -f private/$1.der ]] && [[ -f private/$1.pem ]]; then
        openssl pkcs8 -in private/$1.pem -inform pem \
            -out private/$1.der -outform der -passout pass: -topk8
    fi

    fix_perms
}

fix_perms() {
    find ca certs dh private -type d -exec chmod 700 {} +
    find ca certs dh private -type f -exec chmod 400 {} +
    chmod -R go-rwx .
}

setup() {
    subj="CN=$1"
    [[ -z $UNIT ]] || subj="OU=$UNIT/$subj"
    [[ -z $COMPANY ]] || subj="O=$COMPANY/$subj"
    [[ -z $CITY ]] || subj="L=$CITY/$subj"
    [[ -z $STATE ]] || subj="ST=$STATE/$subj"
    [[ -z $COUNTRY ]] || subj="C=$COUNTRY/$subj"

    mkdir -p ca certs csr dh private
    touch index.db index.db.attr
    if [[ ! -f index.db.serial ]]; then
        head -c 2 /dev/urandom | xxd -p >index.db.serial
    fi

    sed \
        -e "s/TODO_CITY/\"${CITY:-delete}\"/g" \
        -e "s/TODO_CN/\"$1\"/g" \
        -e "s/TODO_COMPANY/\"${COMPANY:-delete}\"/g" \
        -e "s/TODO_COUNTRY/\"${COUNTRY:-delete}\"/g" \
        -e "s/TODO_STATE/\"${STATE:-delete}\"/g" \
        -e "s/TODO_UNIT/\"${UNIT:-delete}\"/g" \
        -e "/delete/d" \
        openssl_cnf >.openssl.cnf
}

usage() {
    echo "Usage: ./${0/*\//} [OPTIONS] [host1]...[hostN]"
    echo "Options:"
    echo "    --clean"
    echo "        Clean up CA, certificates, dh params, and keys"
    echo "    -c, --client"
    echo "        Create client certificate"
    echo "    --dh"
    echo "        Create Diffie-Hellman parameters"
    echo "    -h, --help"
    echo "        Display this help message"
    echo
    exit $1
}

declare -a args
action="server"
unset dh

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "--clean") action="clean" ;;
        "-c"|"--client") action="client" ;;
        "--dh") dh="true" ;;
        "-h"|"--help") usage 0 ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

[[ ! -f params ]] || . params

automate="-batch"
config="-config .openssl.cnf"

case "$action" in
    "clean") rm -rf ca certs csr dh index.db* .openssl.cnf private ;;
    "client"|"server")
        create_ca
        [[ -z $dh ]] || create_dh

        for host in "$@"; do
            create_cert $host $action
        done; unset host
        ;;
esac
